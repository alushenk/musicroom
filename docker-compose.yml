version: '3'
services:
  traefik:
    image: traefik
    command: --web --api --docker --logLevel=DEBUG
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
      - 8080:8080 # The Web UI (enabled by --api)
    #    expose:
    #      - 8080
    #    labels:
    #      - "traefik.enable=true"
    #      - "traefik.frontent.rule=Host:traefik.${DOMAIN}"
    #      - "traefik.frontend.auth.basic=a@a.com:$$apr1$$ax33RJha$$ouYl0yrpk0WOTiItKJGJB0"
    #      - "traefik.port=8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.toml:/traefik.toml
      - ./acme.json:/acme.json
      - ./servers.toml:/servers.toml
  nginx:
    restart: unless-stopped
    build:
      context: .
      dockerfile: DockerfileNginx
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:front.${DOMAIN}"
      - "traefik.backend=Host:nginx.${DOMAIN}"
      - 'traefik.port=80'
#  node:
#    restart: unless-stopped
#    build:
#      context: .
#      dockerfile: DockerfileNode
#    depends_on:
#      - traefik
#    labels:
#      - "traefik.enable=true"
#      - "traefik.frontend.rule=Host:front.${DOMAIN}"
#      - "traefik.backend=Host:nginx.${DOMAIN}"
#      - 'traefik.port=5000'
  web:
    restart: unless-stopped
    build: .
    command: python -u manage.py runserver 0.0.0.0:8000 --noreload # --nostatic
    depends_on:
      - db
      - redis
      - traefik
    environment:
      PYTHONUNBUFFERED: 'true'
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      SECRET_KEY: ${SECRET_KEY}
      DJANGO_SETTINGS_MODULE: music_room.settings.production
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
    logging:
      driver: json-file
      options:
        max-file: '5'
        max-size: '10m'
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:${DOMAIN}"
      - "traefik.backend=Host:${DOMAIN}"
      - 'traefik.port=8000'
  db:
    restart: unless-stopped
    image: postgres:alpine
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
    logging:
      driver: json-file
      options:
        max-file: '5'
        max-size: '10m'
  redis:
    restart: unless-stopped
    image: redis:alpine
    volumes:
      - 'redis-data:/data'
    logging:
      driver: json-file
      options:
        max-file: '5'
        max-size: '10m'
volumes:
  postgres-data:
  redis-data: